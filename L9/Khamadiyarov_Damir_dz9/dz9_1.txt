Практическое задание по теме “Транзакции, переменные, представления”
1. В базе данных shop и sample присутствуют одни и те же таблицы, учебной базы данных. Переместите запись id = 1 из таблицы shop.users в таблицу sample.users. Используйте транзакции.
    Просмотрим начальное содержимое shop.users, где id = 1:
    mysql> SELECT * FROM shop.users WHERE id = 1;
    +----+------------------+-------------+---------------------+---------------------+
    | id | name             | birthday_at | created_at          | updated_at          |
    +----+------------------+-------------+---------------------+---------------------+
    |  1 | Геннадий         | 1990-10-05  | 2017-10-20 08:10:00 | 2017-10-20 08:10:00 |
    +----+------------------+-------------+---------------------+---------------------+
    1 row in set (0,00 sec)

    Просмотрим начальное содержимое sample.users:
    mysql> SELECT * FROM sample.users;
    Empty set (0,00 sec)
    
    Выполним транзакцию:
    mysql> START TRANSACTION;
    Query OK, 0 rows affected (0,00 sec)

    mysql> INSERT INTO sample.users 
        -> SELECT 
        -> id, 
        -> name, 
        -> birthday_at, 
        -> created_at, 
        -> updated_at 
        -> FROM shop.users WHERE id = 1;
    Query OK, 1 row affected (0,00 sec)
    Records: 1  Duplicates: 0  Warnings: 0
    
    mysql> DELETE FROM shop.users WHERE id = 1;
    Query OK, 1 row affected (0,00 sec)
    
    mysql> COMMIT;
    Query OK, 0 rows affected (0,00 sec)
    
    Проверим данные после транзакции:
    mysql> SELECT * FROM sample.users;
    +----+------------------+-------------+---------------------+---------------------+
    | id | name             | birthday_at | created_at          | updated_at          |
    +----+------------------+-------------+---------------------+---------------------+
    |  1 | Геннадий         | 1990-10-05  | 2017-10-20 08:10:00 | 2017-10-20 08:10:00 |
    +----+------------------+-------------+---------------------+---------------------+
    1 row in set (0,01 sec)

    mysql> SELECT * FROM shop.users WHERE id = 1;
    Empty set (0,01 sec)


2. Создайте представление, которое выводит название name товарной позиции из таблицы products и соответствующее название каталога name из таблицы catalogs.
    Просмотрим список таблиц в бд shop:
    mysql> SHOW TABLES;
    +----------------------+
    | Tables_in_shop       |
    +----------------------+
    | cat                  |
    | catalogs             |
    | cities               |
    | discounts            |
    | flights              |
    | orders               |
    | orders_products      |
    | products             |
    | rubrics              |
    | storehouses          |
    | storehouses_products |
    | tbl                  |
    | tbl1                 |
    | tbl2                 |
    | users                |
    +----------------------+
    15 rows in set (0,00 sec)
    
    Создаем представление prod_cat:
    mysql> CREATE VIEW prod_cat AS
        -> SELECT products.name AS prod_name, catalogs.name AS catalog_name
        -> FROM 
        -> products JOIN catalogs 
        -> ON products.catalog_id = catalogs.id;
    Query OK, 0 rows affected (0,01 sec)
    
    Просмотрим список таблиц в бд shop - появилось представление prod_cat:
    mysql> SHOW TABLES;
    +----------------------+
    | Tables_in_shop       |
    +----------------------+
    | cat                  |
    | catalogs             |
    | cities               |
    | discounts            |
    | flights              |
    | orders               |
    | orders_products      |
    | prod_cat             |
    | products             |
    | rubrics              |
    | storehouses          |
    | storehouses_products |
    | tbl                  |
    | tbl1                 |
    | tbl2                 |
    | users                |
    +----------------------+
    16 rows in set (0,00 sec)
    
    Выполним запрос к представлению prod_cat:
    mysql> SELECT * FROM prod_cat;
    +--------------------+----------------------+
    | prod_name          | catalog_name         |
    +--------------------+----------------------+
    | product 1          | Процессоры           |
    | product 2          | Процессоры           |
    | product 4          | Видеокарты           |
    | product 5          | Видеокарты           |
    | product 6          | Network equipment    |
    | product 7          | RAM                  |
    | product 8          | Network equipment    |
    | Intel Core i3-8100 | Процессоры           |
    | Intel Core i5-7400 | Процессоры           |
    | AMD FX-8320E       | Процессоры           |
    | AMD FX-8320        | Процессоры           |
    +--------------------+----------------------+
    11 rows in set (0,00 sec)
    
3. (по желанию) Пусть имеется таблица с календарным полем created_at. В ней размещены разряженые календарные записи за август 2018 года '2018-08-01', '2016-08-04', '2018-08-16' и 2018-08-17. Составьте запрос, который выводит полный список дат за август, выставляя в соседнем поле значение 1, если дата присутствует в исходном таблице и 0, если она отсутствует.
    Создадим представление products_08 на основе таблицы products. В предсталвение попадут записи за август 2018 года и записи с отсутсвующей датой:
    mysql> CREATE OR REPLACE VIEW products_08 AS 
        -> SELECT * FROM products 
        -> WHERE created_at < '2018-09-01 00:00:00.0' AND created_at > '2018-07-31-23:59:59.99' OR created_at IS NULL;
    Query OK, 0 rows affected (0,01 sec)
    
    Выполним запрос к созданному представлению - данные соответсвют необходимой выборке:
    mysql> SELECT * FROM products_08;
    +----+-----------+-------------------------+-------+------------+---------------------+---------------------+
    | id | name      | description             | price | catalog_id | created_at          | updated_at          |
    +----+-----------+-------------------------+-------+------------+---------------------+---------------------+
    |  1 | product 1 | product 1 description 1 |   101 |          1 | NULL                | 2020-07-01 10:00:31 |
    |  2 | product 2 | product 2 description 2 |   102 |          1 | 2018-08-01 08:11:29 | 2020-07-01 10:00:07 |
    |  4 | product 4 | product 4 description 4 |   404 |          3 | NULL                | 2020-07-01 10:00:10 |
    |  5 | product 5 | product 5 description 5 | 12312 |          3 | 2018-08-04 08:12:48 | 2020-07-01 10:00:12 |
    |  6 | product 6 | product 6 description 6 |  4444 |          4 | 2018-08-16 08:13:01 | 2020-07-01 10:00:13 |
    |  7 | product 7 | product 7 description 7 |   555 |         15 | 2018-08-17 08:13:17 | 2020-07-01 10:00:14 |
    |  8 | product 8 | product 8 description 8 |    88 |          4 | NULL                | 2020-07-01 10:00:15 |
    +----+-----------+-------------------------+-------+------------+---------------------+---------------------+
    7 rows in set (0,00 sec)
    
    Запрос по заданию:
    mysql> SELECT created_at, IF(created_at IS NULL, 0, 1) AS date_exists FROM products_08;
    +---------------------+-------------+
    | created_at          | date_exists |
    +---------------------+-------------+
    | NULL                |           0 |
    | 2018-08-01 08:11:29 |           1 |
    | NULL                |           0 |
    | 2018-08-04 08:12:48 |           1 |
    | 2018-08-16 08:13:01 |           1 |
    | 2018-08-17 08:13:17 |           1 |
    | NULL                |           0 |
    +---------------------+-------------+
    7 rows in set (0,00 sec)
    

4. (по желанию) Пусть имеется любая таблица с календарным полем created_at. Создайте запрос, который удаляет устаревшие записи из таблицы, оставляя только 5 самых свежих записей.
    Используем таблицу users из бд vk, создадим копию users_task_1_4, в которое скопируем все содержимое таблицы users:
    mysql> CREATE TABLE users_task_1_4 SELECT * FROM users;
    Query OK, 200 rows affected (0,02 sec)
    Records: 200  Duplicates: 0  Warnings: 0

    Выведем список таблиц - таблица users_task_1_4 появилось:
    mysql> SHOW TABLES;
    +---------------------+
    | Tables_in_vk        |
    +---------------------+
    | communities         |
    | communities_users   |
    | friendship          |
    | friendship_statuses |
    | likes               |
    | media               |
    | media_types         |
    | messages            |
    | profiles            |
    | target_types        |
    | user_statuses       |
    | users               |
    | users_task_1_4      |
    +---------------------+
    13 rows in set (0,00 sec)
    
    Проверим наличие данные в ней:
    mysql> SELECT * FROM users_task_1_4 LIMIT 10;
    +----+------------+-----------+----------------------------+---------------------+-------------+---------------------+---------------------+
    | id | first_name | last_name | email                      | phone               | user_status | created_at          | updated_at          |
    +----+------------+-----------+----------------------------+---------------------+-------------+---------------------+---------------------+
    |  1 | Autumn     | Muller    | mkunze@example.org         | 788.100.9171        |           1 | 1991-07-14 11:04:12 | 1997-09-03 14:00:10 |
    |  2 | Lillian    | Stark     | skiles.william@example.org | 1-216-182-8751      |           2 | 2019-04-19 02:07:30 | 2020-06-14 05:36:08 |
    |  3 | Toy        | Treutel   | kmitchell@example.org      | 1-782-105-8823      |           3 | 1997-07-26 00:24:21 | 2020-06-14 05:37:31 |
    |  4 | Ford       | Abernathy | keeling.kenny@example.net  | +79(3)5808516068    |           1 | 2013-11-18 00:27:43 | 2020-06-14 05:39:54 |
    |  5 | Susie      | Green     | sebert@example.org         | 1-115-919-3448      |           2 | 1992-05-13 14:57:45 | 2020-06-14 05:36:08 |
    |  6 | Elenora    | Strosin   | julian.crist@example.com   | (359)657-7633x82793 |           3 | 2001-03-14 03:15:40 | 2020-06-14 05:37:31 |
    |  7 | Alvena     | Emmerich  | flatley.royal@example.org  | 1-501-165-7074x2147 |           2 | 1975-07-20 08:47:40 | 2020-06-14 05:36:08 |
    |  8 | Lela       | Sanford   | xpouros@example.org        | 229.435.0085x12902  |           3 | 2019-07-13 09:54:03 | 2020-06-14 05:37:31 |
    |  9 | Emie       | Kovacek   | coleman16@example.net      | +45(3)8153023960    |           1 | 1988-02-22 01:23:19 | 2012-12-05 07:36:21 |
    | 10 | Jeffry     | Stracke   | mzulauf@example.net        | 197-311-8521        |           1 | 1992-06-25 03:31:49 | 2020-06-14 05:39:54 |
    +----+------------+-----------+----------------------------+---------------------+-------------+---------------------+---------------------+
    10 rows in set (0,00 sec)
    
    Выведем 5 самых свежих записей из users_task_1_4:
    mysql> SELECT * FROM users_task_1_4 
        -> ORDER BY created_at DESC 
        -> LIMIT 5;
    +-----+------------+-----------+-----------------------+--------------------+-------------+---------------------+---------------------+
    | id  | first_name | last_name | email                 | phone              | user_status | created_at          | updated_at          |
    +-----+------------+-----------+-----------------------+--------------------+-------------+---------------------+---------------------+
    | 159 | Amira      | Watsica   | florian69@example.org | +09(6)5190238614   |           1 | 2020-06-09 02:50:44 | 2020-06-14 05:39:54 |
    | 173 | Audra      | Armstrong | jschuster@example.net | +23(3)6296378243   |           1 | 2020-01-24 22:12:31 | 2020-06-14 05:39:54 |
    | 162 | Malcolm    | O'Hara    | qnolan@example.com    | 963.622.6180x693   |           1 | 2019-12-22 12:30:19 | 2020-06-14 05:39:54 |
    |  38 | Candelario | Halvorson | gerardo23@example.net | 687-252-4428       |           1 | 2019-08-11 13:47:14 | 2020-06-14 05:39:54 |
    |   8 | Lela       | Sanford   | xpouros@example.org   | 229.435.0085x12902 |           3 | 2019-07-13 09:54:03 | 2020-06-14 05:37:31 |
    +-----+------------+-----------+-----------------------+--------------------+-------------+---------------------+---------------------+
    5 rows in set (0,00 sec)
    
    Создадим переменную date_5, в которую запишем значение даты 2019-07-13 09:54:03, соответствующей минимальной дате created_at, то есть все, что старше @date_5 нужно будет удалить:
    mysql> SET @date_5 = (SELECT MIN(created_at ) FROM
    -> (SELECT created_at FROM users_task_1_4
    -> ORDER BY created_at 
    -> DESC LIMIT 5
    -> ) AS date_5th);
    Query OK, 0 rows affected (0,00 sec)

    mysql> SELECT @date_5;
    +---------------------+
    | @date_5             |
    +---------------------+
    | 2019-07-13 09:54:03 |
    +---------------------+
    1 row in set (0,00 sec)
    
    Удалим все записи, даты created_at которых старше @date5
    mysql> DELETE FROM users_task_1_4 WHERE created_at < @date_5;
    Query OK, 195 rows affected (0,01 sec)
    
    Выведем содержимое таблицы users_task_1_4:
    mysql> SELECT * FROM users_task_1_4;
    +-----+------------+-----------+-----------------------+--------------------+-------------+---------------------+---------------------+
    | id  | first_name | last_name | email                 | phone              | user_status | created_at          | updated_at          |
    +-----+------------+-----------+-----------------------+--------------------+-------------+---------------------+---------------------+
    |   8 | Lela       | Sanford   | xpouros@example.org   | 229.435.0085x12902 |           3 | 2019-07-13 09:54:03 | 2020-06-14 05:37:31 |
    |  38 | Candelario | Halvorson | gerardo23@example.net | 687-252-4428       |           1 | 2019-08-11 13:47:14 | 2020-06-14 05:39:54 |
    | 159 | Amira      | Watsica   | florian69@example.org | +09(6)5190238614   |           1 | 2020-06-09 02:50:44 | 2020-06-14 05:39:54 |
    | 162 | Malcolm    | O'Hara    | qnolan@example.com    | 963.622.6180x693   |           1 | 2019-12-22 12:30:19 | 2020-06-14 05:39:54 |
    | 173 | Audra      | Armstrong | jschuster@example.net | +23(3)6296378243   |           1 | 2020-01-24 22:12:31 | 2020-06-14 05:39:54 |
    +-----+------------+-----------+-----------------------+--------------------+-------------+---------------------+---------------------+
    5 rows in set (0,00 sec)
    
    Запишем все в один запрос:
    DELETE FROM users_task_1_4 WHERE created_at < 
        (
        SELECT MIN(created_at) 
            FROM 
                (
                SELECT created_at 
                    FROM users_task_1_4 
                        ORDER BY created_at 
                        DESC LIMIT 5
                ) 
            AS created_at_dates
        );

